@typeparam TItem

@inject IJSRuntime JsRuntime

@code {

    // Component parameters

    [Parameter]
    public List<TItem> DataItemList { get; set; }

    [Parameter]
    public List<DataGridColumnDefinition> Columns { get; set; }

    [Parameter]
    public int currentPageNumber { get; set; } = 1;

    [Parameter]
    public PagingConf Paging { get; set; }

}

<table class="table table-bordered table-sm">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <= 0)
            {
                //Create columns with reflection
            }
            else
            {
                //Create columns base on property "Columns"
                @foreach (var col in Columns)
                {
                    <th> @col.Caption</th>
                }

            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DataItemList.Skip(Paging.ItemsToSkip(currentPageNumber)).Take(Paging.ItemsToTake(DataItemList.Count)))
        @*@foreach (var item in DataItemList)*@
        {

            <tr>
                @foreach (var col in Columns)
                {
                    var value = typeof(TItem).GetProperty(col.DataField).GetValue(item);
                    if (col.DataType != DataTypeEnum.none && !string.IsNullOrEmpty(col.Format))
                        switch (col.DataType)
                        {
                            case DataTypeEnum.Date:
                            case DataTypeEnum.DateTime:
                                value = DateTime.Parse(value.ToString()).ToString(col.Format);
                                break;
                            case DataTypeEnum.Boolean:
                                value = bool.Parse(value.ToString()).ToString();
                                break;
                            case DataTypeEnum.Currency:
                                value = double.Parse(value.ToString()).ToString(col.Format);
                                break;
                        }
                    <td align="@col.Aligment.ToString()">
                        @value
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@if (Paging != null && Paging.Enabled)
{
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" @onclick="PrevPage">Previous</a></li>
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link"  @onclick="NextPage">Next</a></li>
        </ul>
    </nav>
}


@code {

    private async void PrevPage()
    {
        currentPageNumber = Paging.PrevPageNumber(currentPageNumber);
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("alert", "Warning!");
    }

    private async void NextPage()
    {
        await JsRuntime.InvokeVoidAsync("alert", currentPageNumber);
        currentPageNumber = Paging.NextPageNumber(currentPageNumber, DataItemList.Count);
        StateHasChanged();
    }
}


