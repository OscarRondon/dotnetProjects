@inject ICategoryService _categoryService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark navbar-toggler-wrapper">
    <div class="container-fluid">
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span> click

        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-nav">
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (_categoryService.Categories != null && _categoryService.Categories.Count > 0)
        {
            @foreach (var category in _categoryService.Categories)
            {
                <div class="nav-item px-2">
                    <NavLink class="nav-link" href="@("Category/" + category.Url)">
                        <span class="@(category.IconStyle) h4 icon-height" aria-hidden="true"></span>
                        @category.Name
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await _categoryService.GetCategoriesAsync();
        _categoryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _categoryService.OnChange -= StateHasChanged;
    }
}
