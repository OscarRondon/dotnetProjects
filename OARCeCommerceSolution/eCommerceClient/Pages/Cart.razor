@page "/Cart"
@inject ICartService _cartService
@inject IOrderService _orderService

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if (orderPlaced)
{
    <span>Thank you for your order! You can checj your orders <a href="Orders">here</a></span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" alt="@product.Tittle" title="@product.Tittle" />
                </div>
                <div class="name>">
                    <h5><a href="/Product/@product.ProductId">@product.Tittle</a></h5>
                    <span>@product.ProductType</span>
                    <input type="number" value="@product.Quantity"
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quantity"
                           min="1" />
                    <button class="btn-delete" @onclick="@(() => RemoveItemFromCart(product.ProductId, product.ProductTypeId))">
                        <i class="bi bi-trash3-fill h6"></i>
                    </button>
                </div>
                <div class="cart-product-price">
                    $@(product.Price*product.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)
        </div>
        <hr />
        <button class="btn btn-primary float-end mt-3" @onclick="PlaceOrder">
            Placer Order <i class="bi bi-receipt h4 ms-3 mt-2 mb-2"></i>
        </button>
    </div>

}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart..";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await _cartService.GetCartItemsCountAsync();
        cartProducts = await _cartService.GetCartProductsAsync();

        //if ((await _cartService.GetCartItemsAsync()).Count == 0)
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
            //cartProducts = new List<CartProductResponse>();
        }
        //else
        //{
        //    cartProducts = await _cartService.GetCartProductsAsync();
        //}
    }

    private async Task RemoveItemFromCart(int productId, int productTypeId)
    {
        await _cartService.RemoveFromCartAsync(productId, productTypeId);
        await LoadCart();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await _cartService.UpdateQuantityAsync(product);
    }

    private async Task PlaceOrder()
    {
        await _orderService.PlaceOrderAsync();
        await _cartService.GetCartItemsCountAsync();
        orderPlaced = true;
    }
}
