@page "/admin/categories"
@inject ICategoryService _categoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<h3>Categories</h3>

<div class="header">
    <div class="col">Name</div>
    <div class="col">Url</div>
    <div class="col">Icon Style</div>
    <div class="col">Visible</div>
    <div class="col"></div>
</div>

@foreach (var category in _categoryService.AdminCategories)
{
    @if (category.Editing)
    {
        <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingCategory.Name" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingCategory.IconStyle" class="form-control"></InputText>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="editingCategory.Visible" style="transform: scale(1.5,1.5);"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-cloud-upload-fill h5"></i>
                    </button>
                    <button class="btn btn-primary ms-1" @onclick="CancelEditing">
                        <i class="bi bi-x-circle-fill h5"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row @(category.Deleted ? "border bodrder-danger bg-danger-subtle" : "")">
            <div class="col">
                @category.Name
            </div>
            <div class="col">
                @category.Url
            </div>
            <div class="col">
                @category.IconStyle
            </div>
            <div class="col col-visible">
                <span>@(category.Visible ? "✔️" : "")</span>
            </div>
            <div class="col">
                @if (category.Deleted)
                {
                    <button class="btn btn-primary" @onclick="(() => ActivateCategory(category))">
                        <i class="bi bi-plus-square-fill h5"></i>
                    </button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="(() => EditCategory(category))">
                        <i class="bi bi-pencil-fill h5"></i>
                    </button>
                }
                <button type="button" class="btn btn-primary ms-2" @onclick="(() => DeleteCategory(category.Id))">
                    <i class="bi bi-trash3-fill h5"></i>
                </button>
            </div>
        </div>
    }
}
<button class="btn btn-primary d-flex flex-row align-items-md-stretch mt-2" @onclick="CreateNewCategory">
    <i class="bi bi-plus h4 icon-height me-2"></i> Add new category
</button>

@code {
    Category editingCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await _categoryService.GetAdminCategoriesAsync();
        _categoryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _categoryService.OnChange -= StateHasChanged;
    }

    private void CreateNewCategory()
    {
        editingCategory = _categoryService.CreateNewCategory();
    }

    private void EditCategory(Category category)
    {
        category.Editing = true;
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory.IsNew)
            await _categoryService.AddCategoryAsync(editingCategory);
        else
            await _categoryService.UpdateCategoryAsync(editingCategory);
        editingCategory = new Category();
    }

    private async Task CancelEditing()
    {
        editingCategory = new Category();
        await _categoryService.GetAdminCategoriesAsync();
    }

    private async Task ActivateCategory(Category category)
    {
        await _categoryService.UpdateCategoryAsync(category);
    }

    private async Task DeleteCategory(int id)
    {
        await _categoryService.DeleteCategoryAsync(id);
    }
}